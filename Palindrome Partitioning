class Solution {
    //ref:https://leetcode.com/problems/palindrome-partitioning/discuss/41963/Java:-Backtracking-solution.
    public List<List<String>> partition(String s) {
        List<List<String>> res=new ArrayList();
        List<String> list=new ArrayList();
        
        dfs(0,list,res,s);
        return res;
    }
    
    private void dfs(int pos, List<String> list, List<List<String>> res, String s){//dfs
        if(pos==s.length()){
            res.add(new ArrayList(list));
        }
        else{
            for(int i=pos;i<s.length();i++){
                if(isPal(s,pos,i)){
                    list.add(s.substring(pos,i+1));
                    dfs(i+1,list,res,s);
                    list.remove(list.size()-1);
                }
            }
        }
    }
    
    private boolean isPal(String s, int low, int high){//判断是否为回文数的函数
        while(low<high){
            if(s.charAt(low++)!=s.charAt(high--)){
                return false;
            }
        }
        return true;
    }
}
