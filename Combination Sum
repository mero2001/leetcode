class Solution {
    //回溯法
    //ref:https://discuss.leetcode.com/topic/106072/combination-sum-java-solution-with-detailed-explanation
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res=new ArrayList();
        List<Integer> tmp=new ArrayList();
        Arrays.sort(candidates);
        int len=candidates.length;
        if(len==0){
            return res;
        }
        helper(candidates,res,tmp,0,target);
        return res;
    }
    
    public void helper(int[] candidates, List<List<Integer>> res, List<Integer> tmp, int start, int target){
        if(target==0){
            res.add(new ArrayList<Integer>(tmp));
            return;
        }
        for(int i=start;i<candidates.length;i++){
            if(candidates[i]>target){
                break;
            }
            tmp.add(candidates[i]);
            helper(candidates,res,tmp,i,target-candidates[i]);
            tmp.remove(tmp.size()-1);
        }
        
    }
}
