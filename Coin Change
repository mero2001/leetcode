class Solution {
    //ref:https://leetcode.com/problems/coin-change/solution/
    //DP
    //设F[s]为组成s的最少硬币数。则F[s]应等于F[s-c]+1.c为硬币列表中的各硬币值
    public int coinChange(int[] coins, int amount) {
        if(amount<1){
            return 0;
        }
        return coinCount(coins, amount, new int[amount]);
        
    }
    
    public int coinCount(int[] coins, int rem, int[] count){
        if(rem<0){
            return -1;
        }
        if(rem==0){
            return 0;
        }
        if(count[rem-1]!=0){
            return count[rem-1];
        }
        int min=Integer.MAX_VALUE;
        for(int coin:coins){
            int res=coinCount(coins,rem-coin,count);
            if(res>=0&&res<min){
                min=res+1;
            }
        }
        count[rem-1]=min==Integer.MAX_VALUE?-1:min;
        return count[rem-1];
        
    }
    
}
