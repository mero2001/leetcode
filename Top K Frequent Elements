class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        //ref:https://leetcode.com/problems/top-k-frequent-elements/discuss/81602/Java-O(n)-Solution-Bucket-Sort
        //先使用map存不同nums[i]和其对应的个数
        //创造一个list数组buckets,序号i为map中的个数。遍历map，将每个nums[i]添加进buckets[i]列表中
        //将buckets[i]从后到前添加进res中
        //返回res.subList(0,k)
        
        int n=nums.length;
        Map<Integer,Integer> map=new HashMap();
        List<Integer>[] buckets=new ArrayList[n+1];
        
        for(int num:nums){
            if(!map.containsKey(num)){
                map.put(num,1);
            }else{
                map.put(num,map.get(num)+1);
            }
        }
        
        for(Map.Entry<Integer,Integer> entry:map.entrySet()){
            int key=entry.getKey();
            int val=entry.getValue();
            if(buckets[val]==null){
                buckets[val]=new ArrayList();
            }
            buckets[val].add(key);
        }
        
        List<Integer> res=new ArrayList();
        for(int i=n;i>=0;i--){
            if(buckets[i]!=null){
                res.addAll(buckets[i]);
            }
        }
        return res.subList(0,k);
        
    }
}
