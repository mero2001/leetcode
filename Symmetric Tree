/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    //建立两个列表存储从root的左、右节点分别开始先序遍历的列表。注意空值也要进行存储。左子树从左边进行先序遍历，右子树从右边进行先序遍历
    public boolean isSymmetric(TreeNode root) {
        if(root==null){
            return true;
        }
        if(root.left==null&&root.right==null){
            return true;
        }
        if((root.left!=null&&root.right==null)||(root.left==null&&root.right!=null)){
            return false;
        }
        if(root.left.val!=root.right.val){
            return false;
        }
        List<Integer> list1=new ArrayList();
        List<Integer> list2=new ArrayList();
        left(root.left,list1);
        right(root.right,list2);
        if(list1.size()!=list2.size()){
            return false;
        }
        for(int i=0;i<list1.size();i++){
            if(list1.get(i)!=list2.get(i)){
                return false;
            }
        }
        return true;
    }
    
    public void left(TreeNode root,List<Integer> list){
        if(root==null){
            list.add(-1);
            return;
        }
        list.add(root.val);
        left(root.left,list);
        left(root.right,list);
        
    }
    public void right(TreeNode root,List<Integer> list){
        if(root==null){
            list.add(-1);
            return;
        }
        
        list.add(root.val);
        right(root.right,list);
        right(root.left,list);
        
    }
}
