class Solution {
    //ref:https://leetcode.com/problems/largest-rectangle-in-histogram/discuss/28900/O(n)-stack-based-JAVA-solution
    //分别创建两个数组存放当前数字之前heights最小的index和当前数字之后heights最小的index；面积可以使用heights[i]*(nextSmaller[i]-prevSmaller[i]-1)来计算。
    public int largestRectangleArea(int[] heights) {
        int n=heights.length;
        int[] prevSmaller=new int[n];
        int[] nextSmaller=new int[n];
        
        Arrays.fill(prevSmaller,-1);
        Arrays.fill(nextSmaller,n);
        
        for(int i=n-2;i>=0;i--){
            for(int j=i+1;j<n;){//***********
                if(heights[j]<heights[i]){
                    nextSmaller[i]=j;
                    break;
                }else{
                    if(nextSmaller[j]==n){
                        break;
                    }else{
                        j=nextSmaller[j];
                    }
                }
            }
        }
        
        for(int i=1;i<n;i++){
            for(int j=i-1;j>=0;){//*******注意并不需要进行j++
                if(heights[j]<heights[i]){
                    prevSmaller[i]=j;
                    break;
                }else{
                    if(prevSmaller[j]==-1){
                        break;
                    }else{
                        j=prevSmaller[j];
                    }
                }
            }
        }
        
        int res=0;
        for(int i=0;i<n;i++){
            res=Math.max(res,heights[i]*(nextSmaller[i]-prevSmaller[i]-1));
        }
        
        return res;
    }
}
