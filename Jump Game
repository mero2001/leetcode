class Solution {
    //ref:https://leetcode.com/problems/jump-game/solution/
    public boolean canJump(int[] nums) {
        int n=nums.length;
        int lastPos=n-1;
        for(int i=n-1;i>=0;i--){
            if(nums[i]+i>=lastPos){
                lastPos=i;
            }
        }
        
        return lastPos==0;
        /*if(n==1&&nums[0]==0){
            return true;
        }
        if(n!=0&&nums[0]==0){
            return false;
        }
        List<Integer> list=new ArrayList();
        for(int i=0;i<n;i++){
            while(i<n&&nums[i]!=0){
                i++;
            }
            if(i!=n){
                list.add(i);
            }
        }
        if(list.size()==0){
            return true;
        }
        
        int len=list.size();
        while(int j=0;j<len;j++){
            int i
        }
        
        
        
        
        for(int i=n-1;i>=0;i--){
            if(nums[i]==0&&i!=n-1){
                for(int j=0;j<i;j++){
                    if(nums[j]>i-j){
                        for(int m=0;m<=j;m++){
                            
                        }
                        return true;
                    }
                }
                return false;
            }
            if(nums[i]==0&&i==n-1){
                for(int j=0;j<i;j++){
                    if(nums[j]>=i-j){
                        break;
                    }
                }
                return false;
            }
        }
        
        return true;
        */
    }
}
