class Solution {
    //回溯法
    //ref:https://leetcode.com/problems/permutations/discuss/18239/A-general-approach-to-backtracking-questions-in-Java-(Subsets-Permutations-Combination-Sum-Palindrome-Partioning)
    public List<List<Integer>> permute(int[] nums) {
        int len=nums.length;
        List<List<Integer>> res=new ArrayList();
        List<Integer> list=new ArrayList();
        if(len==0){
            return res;
        }
        backtrack(nums,res,list);
        return res;
    }
    
    public void backtrack(int[] nums, List<List<Integer>> res, List<Integer> list){
        if(list.size()==nums.length){
            res.add(new ArrayList(list));
            return;
        }
        for(int i=0;i<nums.length;i++){
            if(list.contains(nums[i])){
                continue;
            }
            list.add(nums[i]);
            backtrack(nums,res,list);
            list.remove(list.size()-1);
        }
    }
}
