class Solution {
    //算出每一行的高度。再对每一行求最大矩形面积
    public int maximalRectangle(char[][] matrix) {//注意该二维数组为char类型
        if(matrix==null||matrix.length==0){
            return 0;
        }
        int m=matrix.length;
        int n=matrix[0].length;
        
        int[][] height=new int[m][n];
        
        for(int j=0;j<n;j++){
            height[0][j]=matrix[0][j]-'0';//转换数字和char
        }
        
        for(int i=1;i<m;i++){
            for(int j=0;j<n;j++){
                if(matrix[i][j]=='0'){
                    height[i][j]=0;
                }else{
                    height[i][j]=height[i-1][j]+1;
                }
            }
        }
        int res=largestRectangleArea(height[0]);
        System.out.println("res:"+res);
        for(int i=0;i<m;i++){
            res=Math.max(res,largestRectangleArea(height[i]));
        }
        return res;
        
        
    }
     public int largestRectangleArea(int[] heights) {
        int n=heights.length;
        int[] prevSmaller=new int[n];
        int[] nextSmaller=new int[n];
        
        Arrays.fill(prevSmaller,-1);
        Arrays.fill(nextSmaller,n);
        
        for(int i=n-2;i>=0;i--){
            for(int j=i+1;j<n;){//***********
                if(heights[j]<heights[i]){
                    nextSmaller[i]=j;
                    break;
                }else{
                    if(nextSmaller[j]==n){
                        break;
                    }else{
                        j=nextSmaller[j];
                    }
                }
            }
        }
        
        for(int i=1;i<n;i++){
            for(int j=i-1;j>=0;){//*******注意并不需要进行j++
                if(heights[j]<heights[i]){
                    prevSmaller[i]=j;
                    break;
                }else{
                    if(prevSmaller[j]==-1){
                        break;
                    }else{
                        j=prevSmaller[j];
                    }
                }
            }
        }
        
        int res=0;
        for(int i=0;i<n;i++){
            res=Math.max(res,heights[i]*(nextSmaller[i]-prevSmaller[i]-1));
        }
        
        return res;
    }
}
