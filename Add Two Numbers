# leetcode
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    //将对应ListNode.val相加,得到返回值，注意进位
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if(l1==null&&l2==null){//判断各种情况
            return null;
        }
        if(l1==null&&l2!=null){
            return l2;
        }
        if(l1!=null&&l2==null){
            return l1;
        }
        int n1=l1.val;
        int n2=l2.val;
        int n=n1+n2;
        boolean flag=false;
        if(n1+n2>=10){//当n1+n2>=10时，前一位要+1，以flag为信号决定前一位是否需要+1
            n=n-10;
            flag=true;
        }
        ListNode first=new ListNode(n);
        ListNode node=first;
        while(!(l2.next==null&&l1.next==null)){
            if(l2.next!=null&&l1.next!=null){
                n1=l1.next.val;
                n2=l2.next.val;
                if(flag){
                    if(n1+n2+1>=10){
                        n=n1+n2+1-10;
                        flag=true;
                    }else{
                        n=n1+n2+1;
                        flag=false;
                    }
                }else{
                    if(n1+n2>=10){
                        n=n1+n2-10;
                        flag=true;
                    }else{
                        n=n1+n2;
                        flag=false;
                    }
                }
            }else if(l1.next==null&&l2.next!=null){
                n2=l2.next.val;
                if(flag){
                    if(n2+1>=10){
                        n=n2+1-10;
                        flag=true;
                    }else{
                        n=n2+1;
                        flag=false;
                    }
                }else{
                    n=n2;
                }
            }else if(l1.next!=null&&l2.next==null){
                n1=l1.next.val;
                if(flag){
                    if(n1+1>=10){
                        n=n1+1-10;
                        flag=true;
                    }else{
                        n=n1+1;
                        flag=false;
                    }
                }else{
                    n=n1;
                }
            }
            node.next=new ListNode(n);
            node=node.next;
            if(l1.next!=null&&l2.next!=null){
                l1=l1.next;
                l2=l2.next;
            }else if(l1.next!=null&&l2.next==null){
                l1=l1.next;
            }else if(l1.next==null&&l2.next!=null){
                l2=l2.next;
            }
            
        }
        if(flag&&(l1.next==null&&l2.next==null)){
            node.next=new ListNode(1);
        }
        return first;
        
        
        
        /*long n1=l1.val;//有的数字连long也处理不了，，
        long n2=l2.val;
        int i=1;
        int j=1;
        while(l1.next!=null){
            n1+=l1.next.val*Math.pow(10,i);
            i++;
            l1=l1.next;
        }
        System.out.println("n1:"+n1);
        while(l2.next!=null){
            n2+=l2.next.val*Math.pow(10,j);
            j++;
            l2=l2.next;
        }
        System.out.println("n2:"+n2);
        long res=n1+n2;
        System.out.println("res:"+res);
        int lastnum=(int)(res%10);
        int m=2;
        res=res/10;
        ListNode node=new ListNode(lastnum);
        ListNode first=node;
        while(res>0){
            int num=(int)(res%10);
            res=res/10;
            node.next=new ListNode(num);
            node=node.next;
        }
        node.next=null;
        return first;*/
    }
}
