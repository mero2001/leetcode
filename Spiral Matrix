class Solution {
    //ref:https://leetcode.com/problems/spiral-matrix/solution/
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> list=new ArrayList();
        if(matrix==null||matrix.length==0){
            return list;
        }
        int row=matrix.length;
        int col=matrix[0].length;
        
        boolean[][] seen=new boolean[row][col];//存储是否见过这个数的矩阵
        int r=0;
        int c=0;
        int di=0;
        
        int[] dr={0,1,0,-1};//方向矩阵
        int[] dc={1,0,-1,0};
        
        for(int i=0;i<row*col;i++){
            list.add(matrix[r][c]);
            seen[r][c]=true;
            
            int nr=r+dr[di];//下一个数的横坐标
            int nc=c+dc[di];//下一个数的纵坐标
            
            if(nr>=0&&nr<row&&nc>=0&&nc<col&&!seen[nr][nc]){//当matrix[nr][nc]在边缘且不越界且unseen时，就往matrix[nr][nc]移动
                r=nr;
                c=nc;
            }else{
                di=(di+1)%4;//转向
                r+=dr[di];
                c+=dc[di];
            }
        }
        
        return list;
    }
}
