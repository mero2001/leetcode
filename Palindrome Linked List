/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    //ref:https://leetcode.com/problems/palindrome-linked-list/discuss/64501/Java-easy-to-understand
    public boolean isPalindrome(ListNode head) {
        ListNode fast=head;
        ListNode slow=head;
        while(fast!=null&&fast.next!=null){
            fast=fast.next.next;
            slow=slow.next;
        }
        if(fast!=null){
            slow=slow.next;
        }
        slow=reverse(slow);
        fast=head;
        while(slow!=null&&fast!=null){
            if(slow.val!=fast.val){
                return false;
            }
            slow=slow.next;
            fast=fast.next;
        }
        return true;
        
}

    //链表逆序：http://blog.csdn.net/bitcarmanlee/article/details/52156574
    public ListNode reverse(ListNode head) {
        ListNode newHead=null;
        while(head!=null){
            ListNode tmp=head.next;//使用一个临时节点储存head.next
            head.next=newHead;//将原链表截断，将head.next指向newHead
            newHead=head;//将head设为新表头
            head=tmp;//将之前保存的临时节点设为下一个节点
        }
        
        return newHead;
    }
}
