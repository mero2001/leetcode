class Solution {
    //ref:https://leetcode.com/problems/surrounded-regions/discuss/41612/A-really-simple-and-readable-C++-solutiononly-cost-12ms
    //搜索边界上的O和与之相连的O,把这些O变成1
    //把所有O变成X
    //把1变回O
    public void solve(char[][] board) {
        int row=board.length;
        if(row==0){
            return;
        }
        int col=board[0].length;
        
        for(int i=0;i<row;i++){
            check(board,i,0,row,col);
            if(col>1){
                check(board,i,col-1,row,col);
            }
        }
        for(int j=1;j+1<col;j++){
            check(board,0,j,row,col);
            if(row>1){
                check(board,row-1,j,row,col);
            }
        }
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(board[i][j]=='O'){
                    board[i][j]='X';
                }
            }
        }
        
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(board[i][j]=='1'){
                    board[i][j]='O';
                }
            }
        }
        
        
    }
    private void check(char[][] vec, int i, int j, int row, int col){
        if(vec[i][j]=='O'){
            vec[i][j]='1';
        
            if(i>1){
                check(vec,i-1,j,row,col);
            }
            if(j>1){
                check(vec,i,j-1,row,col);
            }
            if(i+1<row){
                check(vec,i+1,j,row,col);
            }
            if(j+1<col){
                check(vec,i,j+1,row,col);
            }
        }
    }
}
